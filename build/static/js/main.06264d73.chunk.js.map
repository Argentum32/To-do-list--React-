{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","filter","setFilter","id","title","description","done","todos","setTodos","finished","setFinished","console","log","markup","className","includes","onClick","prev","i","renderedList","length","forEach","action","push","onChange","e","target","value","onSubmit","preventDefault","Date","now","document","getElementById","type","minlength","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iOAiFeA,MA9Ef,WAAgB,IAAD,EACeC,mBAAS,OADxB,mBACNC,EADM,KACEC,EADF,OAEaF,mBAAS,CAAC,CAClCG,GAAI,EACJC,MAAO,WACPC,YAAa,gCACbC,MAAM,GACL,CACDH,GAAI,EACJC,MAAO,aACPC,YAAa,2CACbC,MAAM,KAXK,mBAENC,EAFM,KAECC,EAFD,OAemBR,mBAAS,CAAC,IAf7B,mBAeNS,EAfM,KAeIC,EAfJ,KAgBbC,QAAQC,IAAIL,GACb,IAAMM,EACK,YAAqC,IAAnCV,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,YAAuB,EAAVC,KAChC,OACE,sBAAKQ,UAAWL,EAASM,SAASZ,GAAM,mBAAqB,OAA7D,UACE,6BAAKC,IACL,4BAAIC,IACFI,EAASM,SAASZ,GAEpB,wBAAQW,UAAU,WAAWE,QAAS,kBAAMN,GAAY,SAAAO,GAAI,OAAIA,EAAKhB,QAAO,SAAAiB,GAAC,OAAIA,IAAIf,SAArF,qBADA,wBAAQW,UAAU,WAAWE,QAAS,kBAAMN,GAAY,SAAAO,GAAI,4BAAQA,GAAR,CAAcd,QAA1E,kBAIA,wBAAQW,UAAU,WAAWE,QAAS,kBAAMR,GAAS,SAAAS,GAAI,OAAIA,EAAKhB,QAAO,SAAAiB,GAAC,OAAIA,EAAEf,KAAKA,SAArF,sBARwEA,IAuB5EgB,EAAe,GAcnB,OAFFR,QAAQC,IAAIH,GATVU,EAAaC,OAAS,EACP,QAAXnB,GACFM,EAAMc,SAAQ,SAAAC,GAAM,OAAIH,EAAaI,KAAKV,EAAeS,OAC3C,SAAXrB,GACHM,EAAMc,SAAQ,SAAAH,GAAC,QAAIT,EAASM,SAASG,EAAEf,KAAMgB,EAAaI,KAAKV,EAAeK,OAChE,WAAXjB,GACHM,EAAMc,SAAQ,SAAAH,GAAC,OAAIT,EAASM,SAASG,EAAEf,KAAagB,EAAaI,KAAKV,EAAeK,OAMrF,sBAAKJ,UAAU,MAAf,UAEE,yBAAQA,UAAU,SAASU,SAAU,SAACC,GAAOvB,EAAUuB,EAAEC,OAAOC,QAAhE,UACE,wBAAQA,MAAM,MAAd,mBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,uBAGF,uBAAOC,SAhCE,SAACH,GACdA,EAAEI,iBACFrB,GAAS,SAAAS,GAAI,OAAK,CAChBd,GAAI2B,KAAKC,MACT3B,MAAO4B,SAASC,eAAe,SAASN,MACxCtB,YAAa2B,SAASC,eAAe,SAASN,MAC9CrB,MAAM,IAJK,mBAKPW,QAyBF,UACA,uBAAOH,UAAU,QAAQoB,KAAK,OAAOC,UAAU,IAAIhC,GAAG,QAAQiC,YAAY,6BAC1E,uBAAOtB,UAAU,QAAQoB,KAAK,OAAOC,UAAU,IAAIhC,GAAG,QAAQiC,YAAY,+BAC1E,uBAAOtB,UAAU,QAAQoB,KAAK,cAE5B,qBAAKpB,UAAU,QAAf,SACCK,QC/DMkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASC,eAAe,SAM1BI,M","file":"static/js/main.06264d73.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [filter, setFilter] = useState('all')\n  const [todos, setTodos] = useState([{\n    id: 1,\n    title: 'Buy milk',\n    description: 'Buy 1 liter of milk in Auchan',\n    done: false\n  }, {\n    id: 2,\n    title: 'Wash a car',\n    description: \"Wash sister`s Audy before New Year party\",\n    done: false\n  }\n  ])\n  \n  const [finished, setFinished] = useState([1])\n  console.log(todos)\n const markup = {\n   actions: ({id, title, description, done}) => {\n      return (\n        <div className={finished.includes(id) ? \"todo todos__done\" : \"todo\"} key={id}>\n          <h2>{title}</h2> \n          <p>{description}</p>\n          {!finished.includes(id) ? \n          <button className=\"btn-todo\" onClick={() => setFinished(prev => [...prev, id])}>Done</button> :\n          <button className=\"btn-todo\" onClick={() => setFinished(prev => prev.filter(i => i!==id))}>Restore</button>\n        }\n          \n          <button className=\"btn-todo\" onClick={() => setTodos(prev => prev.filter(i => i.id!==id))}>Delete</button>\n        </div>\n      )\n   }\n }\n\nconst submit = (e) => {\n  e.preventDefault()\n  setTodos(prev => [{\n    id: Date.now(),\n    title: document.getElementById(\"title\").value,\n    description: document.getElementById(\"descr\").value,\n    done: false\n  }, ...prev])\n}\nconst renderedList = []\n\nconst renderList = () => {\n  renderedList.length = 0\n  if (filter === 'all'){\n    todos.forEach(action => renderedList.push(markup.actions(action)))\n  } if(filter === 'done') {\n    todos.forEach(i => finished.includes(i.id) ? renderedList.push(markup.actions(i)) : false)\n  } if(filter === 'active') {\n    todos.forEach(i => finished.includes(i.id) ? false :renderedList.push(markup.actions(i)))\n  }\n}\nconsole.log(finished)\nrenderList()\n  return (\n    <div className=\"App\">\n\n      <select className=\"filter\" onChange={(e) => {setFilter(e.target.value)}}>\n        <option value=\"all\">To Do</option>\n        <option value=\"done\">Done</option>\n        <option value=\"active\">Active</option>\n      </select>\n\n      <form  onSubmit={submit}>\n      <input className=\"field\" type=\"text\" minlength=\"5\" id=\"title\" placeholder=\"Create your to do action\"></input>\n      <input className=\"field\" type=\"text\" minlength=\"5\" id=\"descr\" placeholder=\"Describe your to do action\"></input>\n      <input className=\"field\" type=\"submit\"></input>\n      </form>\n        <div className=\"todos\">\n        {renderedList}\n        </div>  \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}